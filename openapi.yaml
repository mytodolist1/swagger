openapi: 3.0.3
info:
  title: Dokumen API Cloud Function - OpenAPI 3.0
  description: |-
    Ini adalah contoh dokumentasi API menggunakan OpenAPI 3.0 dan Swagger UI. Disini dibuatkan dokumentasi API untuk aplikasi Mytodolist yang dibuat menggunakan Go-lang dan Cloud Function.

    Untuk informasi lebih lanjut, kunjungi website kami di [Website Mytodolist](https://mytodolist1.github.io/).

  termsOfService: https://github.com/mytodolist1/swagger
  contact:
    email: dirgafebrian45@gmail.com
  license:
    name: Mytodolist Package
    url: https://pkg.go.dev/github.com/mytodolist1/be_p3
  version: 0.2.902
externalDocs:
  description: Repo GCF
  url: https://mytodolist1.github.io/cloudfunction_todo/
servers:
  - url: https://asia-southeast2-mytodolist-402507.cloudfunctions.net
tags:
  - name: Auth
    description: Auth to Access to API
  - name: User
    description: Data User
  - name: Todo
    description: Data Todo List User
  - name: Todo Category
    description: Data Todo List Category User
  - name: Todo Clear
    description: Data Todo List Clear User
  - name: Log Todo
    description: Data Log Todo List User

paths:
  /mytodolist-login:
    post:
      tags:
        - Auth
      summary: Login get Token
      description: Login and Get User Token
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '405':
          description: Invalid input
      security:
        - token:
            - write: apiKey
            - read: apiKey

  /mytodolist-register:
    post:
      tags:
        - User
      summary: Register User
      description: Register User
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '405':
          description: Invalid input

  /mytodolist:
    get:
      tags:
        - User
      summary: Get All User
      description: Get semua user
      operationId: getAllUser
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      security:
        - token:
            - write: apiKey
            - read: apiKey
  
  /mytodolist-user/{_id}:
    get:
      tags:
        - User
      summary: Get user By ID
      description: Get user berdasarkan id
      operationId: getUserByID
      parameters:
        - name: _id
          in: query
          description: 'Masukkan id yang terdaftar.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    put:
      tags:
        - User
      summary: Update User
      description: Update User
      operationId: updateUser
      parameters:
        - name: _id
          in: query
          description: 'Masukkan ID user yang ingin di update.'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '405':
          description: Invalid input
      security:
        - token:
            - write: apiKey
            - read: apiKey

  /mytodolist-user/{username}:
    get:
      tags:
        - User
      summary: Get user By Username
      description: Get user berdasarkan username
      operationId: getUserByUsername
      parameters:
        - name: username
          in: query
          description: 'Masukkan username yang terdaftar.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    
    put:
      tags:
        - User
      summary: Change Password
      description: Change Password
      operationId: changepass
      parameters:
        - name: username
          in: query
          description: 'Masukkan username user yang ingin di ganti passwordnya.'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassUser'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '405':
          description: Invalid input
      security:
        - token:
            - write: apiKey
            - read: apiKey

    delete:
      tags:
        - User
      summary: Delete User
      description: Delete User
      operationId: deleteuser
      parameters:
        - name: username
          in: query
          description: 'Masukkan username user yang ingin di hapus.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '405':
          description: Invalid input
      security:
        - token:
            - write: apiKey
            - read: apiKey

  /mytodolist-user:
    get:
      tags:
        - User
      summary: Get user
      description: Get user berdasarkan token
      operationId: getUserByToken
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      security:
        - token:
          - write: apiKey
          - read: apiKey

  /mytodolist-getTodolist:
    get:
      tags:
        - Todo
      summary: Get All Todo
      description: Get semua Data
      operationId: getTodo
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
      security:
        - token:
            - write: apiKey
            - read: apiKey

  /mytodolist-todo:
    post:
      tags:
        - Todo
      summary: Post Todo
      description: Insert Todo
      operationId: insertTodo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '405':
          description: Invalid input
      security:
        - token:
            - write: apiKey
            - read: apiKey

    get:
      tags:
        - Todo
      summary: Get todo
      description: Get todo berdasarkan token
      operationId: gettodoByToken
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
      security:
        - token:
          - write: apiKey
          - read: apiKey

  /mytodolist-todo/{_id}:
    get:
      tags:
        - Todo
      summary: Get Todo By ID
      description: Get todo berdasarkan ID
      operationId: getTodoByID
      parameters:
        - name: _id
          in: query
          description: 'Masukkan _id yang terdaftar.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
      security:
        - token:
            - write: apiKey
            - read: apiKey

    put:
      tags:
        - Todo
      summary: Update Todo
      description: Update Todo
      operationId: updateTodo
      parameters:
        - name: _id
          in: query
          description: 'Masukkan ID user yang ingin di update.'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '405':
          description: Invalid input
      security:
        - token:
            - write: apiKey
            - read: apiKey

    delete:
      tags:
        - Todo
      summary: Delete Todo
      description: Delete Todo
      operationId: deleteTodo
      parameters:
        - name: _id
          in: query
          description: 'Masukkan ID yang ingin di hapus.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '405':
          description: Invalid input
      security:
        - token:
            - write: apiKey
            - read: apiKey

  /mytodolist-category:
    get:
      tags:
        - Todo Category
      summary: Get Category
      description: Get category
      operationId: getCategory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
      security:
        - token:
          - write: apiKey
          - read: apiKey

  /mytodolist-category/{category}:
    get:
      tags:
        - Todo Category
      summary: Get todo By Category
      description: Get todo berdasarkan category
      operationId: gettodoByCategory
      parameters:
        - name: category
          in: query
          description: 'Masukkan category yang terdaftar.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
      security:
        - token:
          - write: apiKey
          - read: apiKey

  /mytodolist-tododone:
    get:
      tags:
        - Todo Clear
      summary: Get todo done
      description: Get todo done
      operationId: gettododone
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoDoneResponse'
      security:
        - token:
          - write: apiKey
          - read: apiKey

    post:
      tags:
        - Todo Clear
      summary: Post Todo Done
      description: Insert Todo Done
      operationId: insertTodoDone
      parameters:
        - name: _id
          in: query
          description: 'Masukkan _id yang terdaftar.'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoDone'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoDoneResponse'
        '405':
          description: Invalid input
      security:
        - token:
            - write: apiKey
            - read: apiKey

  /mytodolist-logTodo:
    get:
      tags:
        - Log Todo
      summary: Get Log Todo
      description: Get Log Todo
      operationId: getlogtodo
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogTodoResponse'
      security:
        - token:
          - write: apiKey
          - read: apiKey

components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          example: budiman@gmail.com
        phonenumber:
          type: string
          example: 628123456789
        username:
          type: string
          example: budiman
        password:
          type: string
          example: secret
        confirmpassword:
          type: string
          example: secret

    UpdateUser:
      type: object
      properties:
        email:
          type: string
          example: tejoko@gmail.com
        username:
          type: string
          example: tejoko

    ChangePassUser:
      type: object
      properties:
        password:
          type: string
          example: secret
        confirmpassword:
          type: string
          example: secret

    UserResponse:
      type: object
      properties:
        status:
          type: bool
          example: false
        message:
          type: string
          example: fehguy
        data:
          type: object
          properties:
            email:
              type: string
            phonenumber:
              type: string
            username:
              type: string
            password:
              type: string
            role:
              type: string
              example: user

    Todo:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        deadline:
          type: string
          example: 02/02/2021
        time:
          type: string
          example: 11:00 AM
        tags:
          type: object
          properties:
            category:
              type: string

    TodoResponse:
      type: object
      properties:
        status:
          type: bool
          example: true
        message:
          type: string
          example: fehguy
        data:
          type: object
          properties:
            title:
              type: string
            description:
              type: string
            deadline:
              type: string
              example: 02/02/2021
            time:
              type: string
              example: 11:00 AM
            isdone:
              type: bool
              example: false

    TodoDone:
      type: object
      properties:
        isdone:
          type: bool
        timeclear:
          type: integer
        todo:
          type: object

    TodoDoneResponse:
      type: object
      properties:
        status:
          type: bool
          example: true
        message:
          type: string
          example: fehguy
        data:
          type: object
          properties:
            isdone:
              type: bool
            timeclear:
              type: integer
            todo:
              type: object

    CategoryResponse:
      type: object
      properties:
        status:
          type: bool
          example: true
        message:
          type: string
          example: fehguy
        datatags:
          type: object
          properties:
            category:
              type: string

    LogTodoResponse:
      type: object
      properties:
        status:
          type: bool
          example: true
        message:
          type: string
          example: fehguy
        data:
          type: object

    Auth:
      type: object
      properties:
        username:
          type: string
          example: budiman
        password:
          type: string
          example: secret
        Role:
          type: string
          example: user

    AuthResponse:
      type: object
      properties:
        status:
          type: bool
          example: false
        message:
          type: string
          example: fehguy
        token:
          type: string
          example: fehguy

  requestBodies:
    AuthReq:
      description: Request Authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Auth'

    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AuthResponse'

  securitySchemes:
    token:
      type: apiKey
      name: Authorization
      in: header